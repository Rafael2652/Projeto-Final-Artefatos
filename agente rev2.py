# -*- coding: utf-8 -*-
"""
App Streamlit: Controle de Notas Fiscais + Assistente I.A. (Ollama - llama3.2)

Como executar localmente:
1) Instale depend√™ncias:  pip install streamlit pandas openpyxl requests python-dateutil
2) Garanta o Ollama em execu√ß√£o com o modelo llama3.2:  https://ollama.com 
   - ollama pull llama3.2
   - ollama serve (por padr√£o em http://localhost:11434)
3) Rode o app:  streamlit run streamlit_ollama_notas.py

O app implementa o fluxo solicitado (itens 1 a 6), valida dados,
orienta o usu√°rio, consulta a I.A. para recomenda√ß√µes com base em
mudan√ßas de processo/legisla√ß√£o e registra na planilha
"Planilha_Controle_Notas_Fiscais.xlsx".
"""

from __future__ import annotations
import os
import re
import io
import json
import time
import uuid
import requests
import pandas as pd
from datetime import datetime, date
from dateutil.parser import parse as dateparse
import streamlit as st

# =============================
# Configura√ß√£o b√°sica do app
# =============================
st.set_page_config(
    page_title="Controle de Notas Fiscais + I.A.",
    page_icon="üìë",
    layout="wide",
)

PLANILHA_ARQUIVO = "Planilha_Controle_Notas_Fiscais.xlsx"
PLANILHA_ABA = "Notas"
OLLAMA_URL = os.environ.get("OLLAMA_URL", "http://localhost:11434")
OLLAMA_MODEL = os.environ.get("OLLAMA_MODEL", "llama3.2")

COLUNAS = [
    "Data de Emiss√£o",
    "N¬∫ da NF",
    "Tipo (Entrada/Sa√≠da)",
    "Fornecedor ou Cliente",
    "Descri√ß√£o / Observa√ß√£o",
    "CFOP",
    "Categoria",
    "Valor Total (R$)",
    "Departamento Respons√°vel",
    "Situa√ß√£o (Paga / Pendente / Recebida / Entregue)",
    "Chave de Acesso (44 d√≠gitos)",
]

# =============================
# Utilidades
# =============================
@st.cache_data(show_spinner=False)
def carregar_planilha(caminho: str) -> pd.DataFrame:
    if os.path.exists(caminho):
        try:
            df = pd.read_excel(caminho, sheet_name=PLANILHA_ABA, dtype=str)
            # padroniza colunas
            faltantes = [c for c in COLUNAS if c not in df.columns]
            for c in faltantes:
                df[c] = ""
            df = df[COLUNAS]
            return df
        except Exception:
            st.warning("Arquivo existente n√£o possui a aba esperada; ser√° criado um novo.")
    # inicia vazio
    return pd.DataFrame(columns=COLUNAS)


def salvar_planilha(caminho: str, df: pd.DataFrame) -> None:
    with pd.ExcelWriter(caminho, engine="openpyxl") as writer:
        df.to_excel(writer, sheet_name=PLANILHA_ABA, index=False)


def df_para_download(df: pd.DataFrame, nome_arquivo: str) -> bytes:
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        df.to_excel(writer, sheet_name=PLANILHA_ABA, index=False)
    return buffer.getvalue()


# =============================
# Regras de neg√≥cio (itens 1 a 5)
# =============================
CFOP_SETOR_MAP = {
    "1": "Compras / Almoxarifado / Contabilidade",
    "2": "Compras / Almoxarifado / Contabilidade",
    "5": "Vendas / Financeiro / Fiscal",
    "6": "Vendas / Financeiro / Fiscal",
}

CATEGORIAS = [
    "Materiais / Insumos",
    "Servi√ßos",
    "Vendas de Produtos",
    "Despesas administrativas",
]

CATEGORIA_SETOR_SUG = {
    "Materiais / Insumos": "Produ√ß√£o / Almoxarifado",
    "Servi√ßos": "Manuten√ß√£o / Financeiro",
    "Vendas de Produtos": "Comercial / Fiscal",
    "Despesas administrativas": "Administrativo / Financeiro",
}

SITUACOES = [
    "Paga",
    "Pendente",
    "Recebida",
    "Entregue",
]

TIPOS = ["Entrada", "Sa√≠da"]


def normalizar_cfop(cfop: str) -> str:
    if not cfop:
        return ""
    # remove tudo que n√£o √© d√≠gito e mant√©m ponto decimal simples
    cfop = cfop.replace(",", ".")
    # aceita formato 1.102 ou 1102; mant√©m com ponto no padr√£o N.NNN
    dig = re.sub(r"[^0-9]", "", cfop)
    if len(dig) == 4:
        return f"{dig[0]}.{dig[1:]}"  # N.NNN
    return cfop.strip()


def inferir_tipo_por_cfop(cfop_norm: str) -> str | None:
    if not cfop_norm:
        return None
    m = re.match(r"^(\d)\.?\d{3}$", cfop_norm)
    if not m:
        return None
    inicial = m.group(1)
    if inicial in {"1", "2"}:
        return "Entrada"
    if inicial in {"5", "6"}:
        return "Sa√≠da"
    return None


def setor_por_cfop(cfop_norm: str) -> str:
    if not cfop_norm:
        return ""
    m = re.match(r"^(\d)", cfop_norm)
    if not m:
        return ""
    return CFOP_SETOR_MAP.get(m.group(1), "")


def validar_chave_acesso(chave: str) -> bool:
    return bool(re.fullmatch(r"\d{44}", (chave or "").strip()))


def validar_data_emissao(data_str: str) -> bool:
    try:
        _ = dateparse(data_str, dayfirst=True).date()
        return True
    except Exception:
        return False


def validar_valor_total(valor: str) -> bool:
    try:
        valor = str(valor).replace(".", "").replace(",", ".")
        float(valor)
        return True
    except Exception:
        return False


def formatar_valor(valor: str) -> str:
    v = str(valor).replace(".", "").replace(",", ".")
    return f"{float(v):.2f}"


# =============================
# Integra√ß√£o com Ollama
# =============================

def ollama_disponivel() -> bool:
    try:
        r = requests.get(OLLAMA_URL)
        return r.status_code < 500
    except Exception:
        return False


def consultar_ollama(mensagem_usuario: str, top_p: float = 0.9, temperature: float = 0.2) -> str:
    """Consulta o endpoint /api/chat do Ollama para orientar o usu√°rio.
    Usa um prompt de sistema para manter o contexto do fluxo (itens 1 a 6).
    """
    payload = {
        "model": OLLAMA_MODEL,
        "messages": [
            {
                "role": "system",
                "content": (
                    "Assuma a fun√ß√£o de um assistente especializado em legisla√ß√£o tribut√°ria e processos de neg√≥cios. Sua principal responsabilidade √© fornecer informa√ß√µes precisas, detalhadas e atualizadas sobre a legisla√ß√£o corporativa, regulamenta√ß√µes fiscais e os processos operacionais obrigat√≥rios para empresas."
                    " Responda de forma objetiva, cite cuidados com CFOP, impostos (ICMS/ISS/IPI),"
                    " e sugira a√ß√µes quando houver mudan√ßas gerenciais ou legisla√ß√µes relevantes."
                    " Se n√£o tiver certeza, pe√ßa documenta√ß√£o (legisla√ß√£o, nota, contrato)."
                ),
            },
            {
                "role": "user",
                "content": mensagem_usuario.strip(),
            },
        ],
        "stream": False,
        "options": {"top_p": top_p, "temperature": temperature},
    }
    try:
        r = requests.post(f"{OLLAMA_URL}/api/chat", json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        return data.get("message", {}).get("content", "")
    except Exception as e:
        return f"[I.A. indispon√≠vel ou erro na consulta: {e}]"


# =============================
# Estado inicial
# =============================
if "df" not in st.session_state:
    st.session_state.df = carregar_planilha(PLANILHA_ARQUIVO)

if "chat" not in st.session_state:
    st.session_state.chat = []  # lista de (role, text)

# =============================
# Sidebar
# =============================
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    st.caption("Par√¢metros da I.A. (Ollama)")
    model = st.text_input("Modelo", value=OLLAMA_MODEL)
    OLLAMA_MODEL = model or OLLAMA_MODEL
    url = st.text_input("Endpoint", value=OLLAMA_URL)
    OLLAMA_URL = url or OLLAMA_URL

    st.divider()
    st.subheader("Planilha")
    st.write(f"Arquivo: **{PLANILHA_ARQUIVO}** / Aba: **{PLANILHA_ABA}**")
    if st.button("üíæ Salvar agora"):
        salvar_planilha(PLANILHA_ARQUIVO, st.session_state.df)
        st.success("Planilha salva no disco.")

    # Carregar exemplos prontos (itens do enunciado)
    if st.button("üì• Carregar exemplos do enunciado"):
        exemplos = [
            ["10/10/2025","1023","Entrada","Ferro & Cia Ltda","Compra de barras de ferro","1.102","Materiais / Insumos","8500","Almoxarifado / Contabilidade","Recebida","35241111879788000123550000001023123456789012"],
            ["11/10/2025","1589","Sa√≠da","Oficina Mec√¢nica Pires","Venda de eixos montados","5.101","Vendas de Produtos","12900","Fiscal / Financeiro","Entregue","35241111879788000123550000001589123456789012"],
            ["15/10/2025","2045","Entrada","Servmaq Servi√ßos Ltda","Manuten√ß√£o de torno mec√¢nico","1.401","Servi√ßos","3500","Manuten√ß√£o / Financeiro","Paga","35241111879788000123550000002045123456789012"],
            ["18/10/2025","1780","Sa√≠da","Auto Pe√ßas Silva","Venda de cubos e flanges","5.102","Vendas de Produtos","24700","Fiscal / Financeiro","Entregue","35241111879788000123550000001780123456789012"],
        ]
        df_ex = pd.DataFrame(exemplos, columns=COLUNAS)
        st.session_state.df = pd.concat([st.session_state.df, df_ex], ignore_index=True)
        st.success("Exemplos adicionados √† tabela.")

# =============================
# Layout principal
# =============================
st.title("üìë Controle de Notas Fiscais + üí¨ Assistente I.A. (Ollama)")

aba_cadastro, aba_assistente, aba_tabela = st.tabs(["Cadastro da Nota", "Assistente I.A.", "Planilha / Exportar"]) 

# -----------------------------
# Aba 1: Cadastro
# -----------------------------
with aba_cadastro:
    st.subheader("Fluxo guiado (Itens 1 a 6)")
    with st.form("form_nota", clear_on_submit=False):
        c1, c2, c3, c4 = st.columns([1,1,1,1])
        with c1:
            data_emissao = st.text_input("Data de Emiss√£o (dd/mm/aaaa)")
        with c2:
            numero_nf = st.text_input("N¬∫ da NF")
        with c3:
            cfop_in = st.text_input("CFOP (ex.: 1.102 ou 1102)")
        with c4:
            tipo_escolhido = st.selectbox("Tipo (Entrada/Sa√≠da)", options=["(auto)"] + TIPOS, index=0)

        cfop_norm = normalizar_cfop(cfop_in)
        tipo_inferido = inferir_tipo_por_cfop(cfop_norm)

        # Item 1: Identificar o tipo de nota
        st.markdown("**1) Tipo de nota**")
        tipo_mostrar = tipo_inferido or "N√£o identificado"
        st.info(f"CFOP normalizado: **{cfop_norm or '‚Äî'}** | Tipo inferido: **{tipo_mostrar}**")
        if tipo_escolhido != "(auto)":
            tipo_final = tipo_escolhido
            if tipo_inferido and tipo_escolhido != tipo_inferido:
                st.warning("O tipo selecionado diverge do CFOP. Verifique a consist√™ncia.")
        else:
            tipo_final = tipo_inferido or ""

        # Item 2: Analisar o tipo de opera√ß√£o (CFOP -> Setor)
        st.markdown("**2) Tipo de opera√ß√£o / Setor**")
        setor_cfop = setor_por_cfop(cfop_norm)
        st.write(f"Setor sugerido pelo CFOP: **{setor_cfop or '‚Äî'}**")

        # Item 3: Classificar por categoria
        st.markdown("**3) Categoria**")
        categoria = st.selectbox("Categoria", options=["(selecione)"] + CATEGORIAS, index=0)
        setor_categoria = CATEGORIA_SETOR_SUG.get(categoria, "") if categoria in CATEGORIAS else ""
        st.caption(f"Setor indicado pela categoria: {setor_categoria or '‚Äî'}")

        # Item 4: Conferir dados principais
        st.markdown("**4) Dados principais**")
        c5, c6 = st.columns([2,2])
        with c5:
            parceiro = st.text_input("Fornecedor ou Cliente")
            descricao = st.text_area("Descri√ß√£o / Observa√ß√£o")
            situacao = st.selectbox("Situa√ß√£o", options=SITUACOES)
        with c6:
            valor_total = st.text_input("Valor Total (R$)")
            departamento_final = st.text_input(
                "Departamento Respons√°vel",
                value=(setor_cfop or setor_categoria or ""),
            )
            chave_acesso = st.text_input("Chave de Acesso (44 d√≠gitos)")

        # Bot√µes do formul√°rio
        submitted = st.form_submit_button("‚ûï Adicionar registro √† planilha")

    if submitted:
        erros = []
        if not validar_data_emissao(data_emissao):
            erros.append("Data de emiss√£o inv√°lida (use dd/mm/aaaa).")
        if not numero_nf:
            erros.append("N√∫mero da NF √© obrigat√≥rio.")
        if not cfop_norm or not re.fullmatch(r"\d\.\d{3}", cfop_norm or ""):
            erros.append("CFOP inv√°lido (use 1.102 ou similar).")
        if not tipo_final:
            erros.append("Tipo n√£o definido (selecione manualmente ou corrija o CFOP).")
        if categoria not in CATEGORIAS:
            erros.append("Categoria n√£o selecionada.")
        if not validar_valor_total(valor_total):
            erros.append("Valor total inv√°lido.")
        if not departamento_final:
            erros.append("Departamento respons√°vel n√£o informado.")
        if not validar_chave_acesso(chave_acesso):
            erros.append("Chave de acesso deve conter 44 d√≠gitos num√©ricos.")

        if erros:
            st.error("\n".join([f"‚Ä¢ {e}" for e in erros]))
        else:
            registro = {
                "Data de Emiss√£o": dateparse(data_emissao, dayfirst=True).strftime("%d/%m/%Y"),
                "N¬∫ da NF": numero_nf.strip(),
                "Tipo (Entrada/Sa√≠da)": tipo_final,
                "Fornecedor ou Cliente": parceiro.strip(),
                "Descri√ß√£o / Observa√ß√£o": descricao.strip(),
                "CFOP": cfop_norm,
                "Categoria": categoria,
                "Valor Total (R$)": formatar_valor(valor_total),
                "Departamento Respons√°vel": departamento_final.strip(),
                "Situa√ß√£o (Paga / Pendente / Recebida / Entregue)": situacao,
                "Chave de Acesso (44 d√≠gitos)": chave_acesso.strip(),
            }
            st.session_state.df = pd.concat(
                [st.session_state.df, pd.DataFrame([registro])], ignore_index=True
            )
            salvar_planilha(PLANILHA_ARQUIVO, st.session_state.df)
            st.success("Registro adicionado e planilha atualizada (Item 6 conclu√≠do).")

            with st.expander("üìÑ Registro inserido"):
                st.dataframe(pd.DataFrame([registro]), use_container_width=True)

# -----------------------------
# Aba 2: Assistente I.A.
# -----------------------------
with aba_assistente:
    st.subheader("Pergunte sobre processos, CFOPs, impostos e mudan√ßas de legisla√ß√£o")
    if not ollama_disponivel():
        st.warning(
            "Ollama n√£o detectado em **%s**. Ajuste o endpoint no menu lateral e garanta que o modelo '%s' est√° dispon√≠vel."
            % (OLLAMA_URL, OLLAMA_MODEL)
        )

    # Caixa de prompt
    prompt = st.text_area(
        "Sua pergunta ou descreva a mudan√ßa de processo/legisla√ß√£o para receber recomenda√ß√µes:",
        placeholder=(
            "Exemplos: 'Nova al√≠quota de ISS para servi√ßos de manuten√ß√£o mudou no munic√≠pio X, como adaptar?\n"
            "CFOP 5.101 vs 5.102 para venda interna: diferen√ßas pr√°ticas?'"
        ),
        height=120,
    )

    col_a, col_b = st.columns([1, 1])
    with col_a:
        temp = st.slider("Temperature", 0.0, 1.0, 0.2, 0.05)
    with col_b:
        top_p = st.slider("Top-p", 0.1, 1.0, 0.9, 0.05)

    if st.button("üß† Consultar I.A."):
        if not prompt.strip():
            st.error("Digite algo para consultar a I.A.")
        else:
            st.session_state.chat.append(("user", prompt))
            resposta = consultar_ollama(prompt, top_p=top_p, temperature=temp)
            st.session_state.chat.append(("assistant", resposta))

    # Hist√≥rico simples
    if st.session_state.chat:
        for role, msg in st.session_state.chat[-12:]:
            if role == "user":
                st.markdown(f"**Voc√™:** {msg}")
            else:
                st.markdown(f"**I.A.:** {msg}")

# -----------------------------
# Aba 3: Planilha / Exportar (Item 6)
# -----------------------------
with aba_tabela:
    st.subheader("Registros na planilha (Item 6)")
    st.dataframe(st.session_state.df, use_container_width=True, hide_index=True)

    col1, col2, col3 = st.columns([1,1,1])
    with col1:
        if st.button("üßπ Remover linhas selecionadas"):
            st.info("Use o filtro abaixo para exportar um subconjunto. Para remo√ß√£o f√≠sica, ajuste manualmente no Excel se preferir.")
    with col2:
        st.write("")
    with col3:
        if st.button("üíΩ Salvar planilha no disco"):
            salvar_planilha(PLANILHA_ARQUIVO, st.session_state.df)
            st.success(f"Arquivo salvo: {PLANILHA_ARQUIVO}")

    st.markdown("### Exportar")
    df = st.session_state.df.copy()
    excel_bytes = df_para_download(df, PLANILHA_ARQUIVO)
    st.download_button(
        label="‚¨áÔ∏è Baixar Planilha_Controle_Notas_Fiscais.xlsx",
        data=excel_bytes,
        file_name=PLANILHA_ARQUIVO,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

# =============================
# Rodap√©
# =============================
st.caption(
    "Dica: preencha o CFOP corretamente para que o sistema infira o tipo e o setor.\n"
    "Use a aba de Assistente I.A. para validar regras fiscais e se manter atualizado sobre eventuais mudan√ßas."
)
